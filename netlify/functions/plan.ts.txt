// netlify/functions/plan.ts
// ESM, no extra deps. Uses native fetch to call OpenAI.
export const config = {
  path: "/.netlify/functions/plan",
};

type Event = {
  httpMethod: string;
  body: string | null;
};

function cors() {
  return {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "POST, OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type, Authorization",
  };
}

export default async (event: Event) => {
  if (event.httpMethod === "OPTIONS") {
    return { statusCode: 204, headers: cors(), body: "" };
  }
  if (event.httpMethod !== "POST") {
    return { statusCode: 405, headers: cors(), body: "Method Not Allowed" };
  }

  try {
    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
    if (!OPENAI_API_KEY) {
      return { statusCode: 500, headers: cors(), body: "Missing OPENAI_API_KEY" };
    }

    const { planType, form, filesText = [], customInstructions = "" } = JSON.parse(event.body || "{}");

    if (!planType || !form) {
      return {
        statusCode: 400,
        headers: cors(),
        body: JSON.stringify({ error: "Missing planType or form" }),
      };
    }

    const fileSnippets =
      (filesText as Array<{ name: string; text: string }>)
        .filter(f => f?.text?.trim())
        .map(f => `\n[${f.name}]\n${(f.text || "").slice(0, 5000)}`)
        .join("\n\n") || "(no file text)";

    const system = `You are an instructional designer for Kâ€“12. Output a single HTML snippet only (no <html>/<body>).
- Prefer short sections, headings, and tables (<h1..h3>, <p>, <ul>, <ol>, <table>).
- Align language to Colorado standards if mentioned; do not invent codes.
- Include "Why this matters/transfer" where appropriate.
- For differentiation, cover accommodations and MTSS tiers where relevant.
- Weekly plans: horizontal chart with columns: Day, Date, Topic, Key Activities, Assessment/Exit, Materials, Notes, Attachments.
- Unit plans: include Essential Questions, Overview, Outcomes (Know/Do), Assignments/Assessments, Vocab (Tier 2 & Tier 3), ELL Supports, Learning Progression, Common Misconceptions, and a Pacing Guide (Week squares).
${customInstructions ? `- Extra user directives:\n${customInstructions}` : ""}`;

    const user = `Plan type: ${String(planType).toUpperCase()}
Form fields (JSON):\n${JSON.stringify(form, null, 2)}

filesText (best-effort, may be empty):\n${fileSnippets}

Return ONLY the HTML snippet.`;

    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: process.env.OPENAI_MODEL || "gpt-4o-mini",
        temperature: 0.4,
        max_tokens: 2500,
        messages: [
          { role: "system", content: system },
          { role: "user", content: user },
        ],
      }),
    });

    if (!resp.ok) {
      const text = await resp.text();
      return { statusCode: resp.status, headers: cors(), body: text || "OpenAI API error" };
    }

    const data = await resp.json();
    const html = data?.choices?.[0]?.message?.content || "";
    return {
      statusCode: 200,
      headers: { "Content-Type": "application/json", ...cors() },
      body: JSON.stringify({ html }),
    };
  } catch (err: any) {
    return { statusCode: 500, headers: cors(), body: String(err?.message || err) };
  }
};
